<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://shunyi.github.com</link>
    <atom:link href="http://shunyi.github.com/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>星期日, 24 十二月 2017 15:18:04 +0800</pubDate>
    <lastBuildDate>星期日, 24 十二月 2017 15:18:04 +0800</lastBuildDate>

    <item>
      <title>Spring 與 Quartz 版本對應</title>
      <link>http://shunyi.github.com/blog/2017/spring-quartz.html</link>
      <pubDate>星期日, 24 十二月 2017 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2017/spring-quartz.html</guid>
      	<description>
	&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;若要在 Spring 中使用 Quartz v1.x 則使用以下設定 (JobDetailBean &amp;amp; SimpleTriggerBean)&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;jobDetailBean&amp;quot; class=&amp;quot;org.springframework.scheduling.quartz.JobDetailBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;jobClass&amp;quot; value=&amp;quot;idv.shunyi.mvc.QuartzTest&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&amp;quot;simpleTriggerBean&amp;quot; class=&amp;quot;org.springframework.scheduling.quartz.SimpleTriggerBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;jobDetail&amp;quot; ref=&amp;quot;jobDetailBean&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;repeatInterval&amp;quot; value=&amp;quot;5000&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;startDelay&amp;quot; value=&amp;quot;1000&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;若要在 Spring (v3.1+) 中使用 Quartz v2.x 則使用以下設定 (JobDetail**Factory**Bean &amp;amp; SimpleTrigger**Factory**Bean)&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;&amp;lt;bean id=&amp;quot;jobDetailBean&amp;quot; class=&amp;quot;org.springframework.scheduling.quartz.JobDetailFactoryBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;jobClass&amp;quot; value=&amp;quot;idv.shunyi.mvc.QuartzTest&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;bean id=&amp;quot;simpleTriggerBean&amp;quot; class=&amp;quot;org.springframework.scheduling.quartz.SimpleTriggerFactoryBean&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;jobDetail&amp;quot; ref=&amp;quot;jobDetailBean&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;repeatInterval&amp;quot; value=&amp;quot;5000&amp;quot; /&amp;gt;
    &amp;lt;property name=&amp;quot;startDelay&amp;quot; value=&amp;quot;1000&amp;quot; /&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;參考資料&lt;br/&gt;&lt;a href=&quot;https://jira.spring.io/browse/SPR-8581&quot;&gt;Spring should support Quartz 2.0 CronTrigger interface&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://www.mkyong.com/spring/incompatibleclasschangeerror-jobdetailbean-has-interface-org-quartz-jobdetail-as-super-class/&quot;&gt;IncompatibleClassChangeError : JobDetailBean has interface org.quartz.JobDetail as super class&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://websystique.com/spring/spring-4-quartz-scheduler-integration-example/&quot;&gt;Spring 4 + Quartz Scheduler Integration Example&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/3.1.1.RELEASE/javadoc-api/org/springframework/scheduling/quartz/JobDetailFactoryBean.html&quot;&gt;JobDetailFactoryBean&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;https://docs.spring.io/spring/docs/3.1.1.RELEASE/javadoc-api/org/springframework/scheduling/quartz/SimpleTriggerFactoryBean.html&quot;&gt;SimpleTriggerFactoryBean&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
	</description>
    </item>
    <item>
      <title>關於 volatile 關鍵字</title>
      <link>http://shunyi.github.com/blog/2017/volatile.html</link>
      <pubDate>星期日, 10 十二月 2017 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2017/volatile.html</guid>
      	<description>
	&lt;h3&gt;使用 volatile 的變數&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;簡單的解釋： &lt;strong&gt;在多執行緒的環境下，&lt;code&gt;volatile&lt;/code&gt; 用於讓變數的讀和寫都在記憶體中執行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因為每個執行緒都需將變數放在 CPU cache 才能做運算，所以要從記憶體中把所有可存取的變數複製一份副本到 CPU cache 以供運算時讀寫操作使用，此時就有可能因為某些運算造成 CPU cache 存的變數值和記憶體存的變數值不一致。&lt;code&gt;volatile&lt;/code&gt; 可以保證變數的讀寫操作都在記憶體中執行，以確保在多個執行緒都可以取到最新的變數值。&lt;/p&gt;
&lt;p&gt;換個說法，每個執行緒都有自己的堆疊，所以它可以存取自己的變數副本。當執行緒被建立時，它將所有可存取的變數複製到自己的記憶體中。&lt;code&gt;volatile&lt;/code&gt; 關鍵字用於告訴 JVM 說：「注意，這個變數可以在其他執行緒中修改」。若沒有這個關鍵字，JVM 可以自由地進行一些最佳化，像是在某些執行緒中從不更新這些本地副本。&lt;code&gt;volatile&lt;/code&gt; 會強制執行緒更新每個變數的原始值。&lt;code&gt;volatile&lt;/code&gt; 關鍵字可以用在任何類型的變數，可以是 primitive 或 objects！&lt;/p&gt;
&lt;h3&gt;未使用 volatile 的變數&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;對於非 &lt;code&gt;volatile&lt;/code&gt; 變數而言，JVM 並不能保證什麼時候把記憶體的變數值讀取到 CPU cache 中，以及何時把 CPU cache 的變數值寫入到記憶體中。&lt;/p&gt;
&lt;p&gt;因此在多執行緒的環境下，有可能造成 Thread 1 將 counter 變數設為 7，但沒有馬上寫入到記憶體中，造成 Thread 2 取到 counter 之值仍為 0。&lt;br/&gt;&lt;img src=&quot;http://tutorials.jenkov.com/images/java-concurrency/java-volatile-2.png&quot; alt=&quot;java-volatile-2.png&quot; /&gt;&lt;br/&gt;&lt;a href=&quot;http://tutorials.jenkov.com/java-concurrency/volatile.html&quot;&gt;圖片來源&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;效能&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;由於 &lt;code&gt;volatile&lt;/code&gt; 變數的讀寫都是在記憶體中執行，所以比直接在 CPU cache 做變數讀寫來得慢。&lt;br/&gt;不過比 &lt;code&gt;synchronized&lt;/code&gt; 快，因為 &lt;code&gt;synchronized&lt;/code&gt; 要等到寫資料的執行緒做完才能夠讀到資料。&lt;/p&gt;
&lt;h3&gt;為何不使用 synchronized 關鍵字&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;除了效能比較慢之外，用 &lt;code&gt;synchronized&lt;/code&gt; 有一個風險是，若正在讀取變數的執行緒因為某些原因臨時被暫停 (suspended) 的話，其他正在等待寫入同一個變數的執行緒會 &lt;strong&gt;陷入無限的等待&lt;/strong&gt; 或 &lt;strong&gt;直到讀取變數的執行緒終於做完&lt;/strong&gt;。&lt;/p&gt;
&lt;h3&gt;參考資料&lt;/h3&gt;
&lt;hr/&gt;
&lt;p&gt;&lt;a href=&quot;https://dzone.com/articles/java-volatile-keyword-0&quot;&gt;Java Volatile Keyword Explained by Example&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://tutorials.jenkov.com/java-concurrency/volatile.html&quot;&gt;Java Volatile Keyword&lt;/a&gt;&lt;br/&gt;&lt;a href=&quot;http://lucumt.info/posts/java-concurrency/java-volatile-keyword/&quot;&gt;[译] Java Volatile 关键字详解&lt;/a&gt;&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Open NTP Daemon</title>
      <link>http://shunyi.github.com/blog/2017/openntpd.html</link>
      <pubDate>星期六, 9 十二月 2017 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2017/openntpd.html</guid>
      	<description>
	&lt;ol&gt;
  &lt;li&gt;
  &lt;p&gt;安裝環境&lt;br/&gt;Debain Jessie&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;先安裝 openntpd&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;apt-get install openntpd
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;若要使用國內的 NTP 伺服器，可修改 openntpd 的設定檔，並加入以下設定&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;#將預設的國外 NTP 伺服器註解掉
#servers 0.debian.pool.ntp.org
#servers 1.debian.pool.ntp.org
#servers 2.debian.pool.ntp.org
#servers 3.debian.pool.ntp.org

servers tock.stdtime.gov.tw
servers time.stdtime.gov.tw
servers clock.stdtime.gov.tw 
servers tick.stdtime.gov.tw
servers watch.stdtime.gov.tw
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安裝完後 openntpd 就會自動於 daemon 執行了，若要確認 openntpd 有正確運作，可使用以下指令&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;systemctl status openntpd

#執行結果如下，Active 為 running 代表有正確執行
● openntpd.service - OpenNTPd Network Time Protocol
   Loaded: loaded (/lib/systemd/system/openntpd.service; enabled)
   Active: active (running) since Sat 2017-12-09 12:05:17 CST; 2h 41min ago
  Process: 3715 ExecStart=/usr/sbin/ntpd $DAEMON_OPTS (code=exited, status=0/SUCCESS)
  Process: 3712 ExecStartPre=/usr/sbin/ntpd -n $DAEMON_OPTS (code=exited, status=0/SUCCESS)
 Main PID: 3717 (ntpd)
   CGroup: /system.slice/openntpd.service
           ├─3717 /usr/sbin/ntpd -f /etc/openntpd/ntpd.conf
           ├─3718 ntpd: ntp engine
           └─3719 ntpd: dns engine
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;若要手動執行 openntpd，可使用以下指令&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;ntpd -dsv
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;參考資料&lt;br/&gt;　　&lt;a href=&quot;http://www.stdtime.gov.tw/Time/ntp/resource.htm&quot;&gt;NTP 的網路資源&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://www.stdtime.gov.tw/chinese/bulletin/NTP%E6%96%B0%E5%A2%9E%E9%A0%BB%E5%AF%AC.txt&quot;&gt;NTP 新增頻寬&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;http://www.stdtime.gov.tw/chinese/bulletin/NTP%20promo.txt&quot;&gt;NTP 伺服器&lt;/a&gt;&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Apache Tika 範例</title>
      <link>http://shunyi.github.com/blog/2017/tika-basic-sample.html</link>
      <pubDate>星期日, 19 十一月 2017 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2017/tika-basic-sample.html</guid>
      	<description>
	&lt;p&gt;可利用 Tika 來取得檔案的內文、&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%83%E6%95%B0%E6%8D%AE&quot;&gt;Metadata&lt;/a&gt; 以及 &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B&quot;&gt;MIME type&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;先準備 pom.xml，在 &lt;code&gt;&amp;lt;dependency&amp;gt;&lt;/code&gt; 中加入：&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
       &amp;lt;groupId&amp;gt;org.apache.tika&amp;lt;/groupId&amp;gt;
       &amp;lt;artifactId&amp;gt;tika-core&amp;lt;/artifactId&amp;gt;
       &amp;lt;version&amp;gt;1.16&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
       &amp;lt;groupId&amp;gt;org.apache.tika&amp;lt;/groupId&amp;gt;
       &amp;lt;artifactId&amp;gt;tika-parsers&amp;lt;/artifactId&amp;gt;
       &amp;lt;version&amp;gt;1.16&amp;lt;/version&amp;gt;
       &amp;lt;!-- 不知為何 tika-parsers 會依賴於 cxf-rt-rs-client 和 quartz，在這個範例中我先把它排除掉 --&amp;gt;
       &amp;lt;exclusions&amp;gt;
         &amp;lt;exclusion&amp;gt;
          &amp;lt;groupId&amp;gt;org.apache.cxf&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;cxf-rt-rs-client&amp;lt;/artifactId&amp;gt;
         &amp;lt;/exclusion&amp;gt;
         &amp;lt;exclusion&amp;gt;
          &amp;lt;groupId&amp;gt;org.quartz-scheduler&amp;lt;/groupId&amp;gt;
          &amp;lt;artifactId&amp;gt;quartz&amp;lt;/artifactId&amp;gt;
         &amp;lt;/exclusion&amp;gt;
       &amp;lt;/exclusions&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
       &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
       &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
       &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt;
       &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;執行 &lt;code&gt;mvn eclipse:eclipse&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;打開 Eclipse，並將剛剛建立的 project 匯入&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;建立 TikaTest.java&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;package idv.shunyi.tika;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.Reader;

import org.apache.tika.Tika;
import org.apache.tika.metadata.Metadata;
import org.junit.Before;
import org.junit.Test;

public class TikaTest {
    private Tika tika;
    private File file;

    @Before
    public void setUp() throws Exception {
       tika = new Tika();
       file = new File(TikaTest.class.getResource(&amp;quot;/test.html&amp;quot;).toURI());
    }

    @Test
    public void testParse() throws Exception {
       Metadata metadata = new Metadata();

       try (InputStream in = new FileInputStream(file)) {
         Reader reader = tika.parse(in, metadata);

         try (BufferedReader br = new BufferedReader(reader)) {

          // Print extracted text content
          System.out.println(&amp;quot;### extracted text content&amp;quot;);
          for (String text; (text = br.readLine()) != null;) {
              System.out.println(text);
          }
          System.out.println();

          // Print meta data
          System.out.println(&amp;quot;### metadata&amp;quot;);
          for (String name : metadata.names()) {
              System.out.println(name + &amp;quot; = &amp;quot; + metadata.get(name));
          }
          System.out.println();
         }
       }
    }

    @Test
    public void testParseToString() throws Exception {
       System.out.println(&amp;quot;### parse to string&amp;quot;);
       try (InputStream stream = new FileInputStream(file)) {
         String text =  tika.parseToString(stream);
         System.out.println(text);
       }
       System.out.println();
    }

    @Test
    public void testDetect() throws Exception {
       System.out.println(&amp;quot;### detect media type&amp;quot;);
       String mimeType = tika.detect(file);
       System.out.println(mimeType);
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;執行結果如下：&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;### extracted text content

    這是內文

### metadata
X-Parsed-By = org.apache.tika.parser.DefaultParser
dc:title = 這是標題
Content-Encoding = UTF-8
title = 這是標題
Content-Type = text/html; charset=UTF-8

### parse to string

    這是內文


### detect media type
text/html
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;
	</description>
    </item>
    <item>
      <title>Apache Tika artifacts</title>
      <link>http://shunyi.github.com/blog/2017/tika-artifacts.html</link>
      <pubDate>星期六, 4 十一月 2017 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2017/tika-artifacts.html</guid>
      	<description>
	&lt;h3&gt;tika-core/target/tika-core-*.jar&lt;/h3&gt;
&lt;p&gt;　　Tika core library. Contains the core interfaces and classes of Tika, but none of the parser implementations. Depends only on Java 6.&lt;/p&gt;
&lt;p&gt;　　Tika 的核心函式庫，不包含任何 Parser&lt;/p&gt;
&lt;h3&gt;tika-parsers/target/tika-parsers-*.jar&lt;/h3&gt;
&lt;p&gt;　　Tika parsers. Collection of classes that implement the Tika Parser interface based on various external parser libraries.&lt;/p&gt;
&lt;p&gt;　　Tika Parser 函式庫的彙集 &lt;/p&gt;
&lt;h3&gt;tika-app/target/tika-app-*.jar&lt;/h3&gt;
&lt;p&gt;　　Tika application. Combines the above components and all the external parser libraries into a single runnable jar with a GUI and a command line interface.&lt;/p&gt;
&lt;p&gt;　　命令列模式的 Tika，相關說明請&lt;a href=&quot;https://tika.apache.org/1.16/gettingstarted.html#Using_Tika_as_a_command_line_utility&quot;&gt;參考連結&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;tika-server/target/tika-server-*.jar&lt;/h3&gt;
&lt;p&gt;　　Tika JAX-RS REST application. This is a Jetty web server running Tika REST services.&lt;/p&gt;
&lt;p&gt;　　在 Jetty 上提供 Tika REST 服務，相關說明請&lt;a href=&quot;https://wiki.apache.org/tika/TikaJAXRS&quot;&gt;參考連結&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;tika-bundle/target/tika-bundle-*.jar&lt;/h3&gt;
&lt;p&gt;　　Tika bundle. An OSGi bundle that combines tika-parsers with non-OSGified parser libraries to make them easy to deploy in an OSGi environment.&lt;/p&gt;
&lt;p&gt;　　Tika 的 OSGi bundle&lt;/p&gt;
&lt;h3&gt;tika-eval-*.jar&lt;/h3&gt;
&lt;p&gt;　　沒有包含任何 Parser 的版本&lt;/p&gt;
&lt;h3&gt;參考文件&lt;/h3&gt;
&lt;p&gt;　　&lt;a href=&quot;https://tika.apache.org/1.16/gettingstarted.html#Build_artifacts&quot;&gt;Build artifacts&lt;/a&gt;&lt;br/&gt;　　&lt;a href=&quot;https://tika.apache.org/download.html#Download_Apache_Tika&quot;&gt;Download Apache Tika&lt;/a&gt;&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Firefox for Debain Jessie</title>
      <link>http://shunyi.github.com/blog/2017/debian-jessie-firefox.html</link>
      <pubDate>星期日, 29 十月 2017 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2017/debian-jessie-firefox.html</guid>
      	<description>
	&lt;p&gt;想把 Debian Jessie 的 Iceweasel 升級成 &lt;a href=&quot;https://packages.debian.org/jessie/firefox-esr&quot;&gt;Firefox ESR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;按照 &lt;a href=&quot;https://mozilla.debian.net/&quot;&gt;Debian Mozilla Team&lt;/a&gt; 網頁上提供的訊息，應該是有 Firefox ESR 52 可以安裝&lt;/p&gt;
&lt;p&gt;但是照網頁上的指示，更新 /etc/apt/sources.list 並執行 apt-get 後，卻顯示錯誤訊息：&lt;/p&gt;
&lt;p&gt;　　Package firefox-esr is not available, but is referred to by another package.&lt;br/&gt;　　This may mean that the package is missing, has been obsoleted, or&lt;br/&gt;　　is only available from another source&lt;/p&gt;
&lt;p&gt;　　E: Package &apos;firefox-esr&apos; has no installation candidate&lt;/p&gt;
&lt;p&gt;寫信去 &lt;a href=&quot;mailto:&amp;#x70;&amp;#x6b;g&amp;#x2d;&amp;#x6d;&amp;#x6f;&amp;#122;i&amp;#x6c;&amp;#x6c;&amp;#97;&amp;#x2d;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6e;&amp;#x74;&amp;#97;&amp;#105;&amp;#110;e&amp;#x72;&amp;#115;&amp;#x40;l&amp;#x69;&amp;#x73;&amp;#116;&amp;#115;&amp;#46;&amp;#97;&amp;#x6c;&amp;#105;&amp;#x6f;&amp;#116;&amp;#x68;&amp;#46;d&amp;#x65;&amp;#98;&amp;#105;a&amp;#x6e;&amp;#x2e;&amp;#x6f;&amp;#114;&amp;#103;&quot;&gt;&amp;#x70;&amp;#x6b;g&amp;#x2d;&amp;#x6d;&amp;#x6f;&amp;#122;i&amp;#x6c;&amp;#x6c;&amp;#97;&amp;#x2d;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6e;&amp;#x74;&amp;#97;&amp;#105;&amp;#110;e&amp;#x72;&amp;#115;&amp;#x40;l&amp;#x69;&amp;#x73;&amp;#116;&amp;#115;&amp;#46;&amp;#97;&amp;#x6c;&amp;#105;&amp;#x6f;&amp;#116;&amp;#x68;&amp;#46;d&amp;#x65;&amp;#98;&amp;#105;a&amp;#x6e;&amp;#x2e;&amp;#x6f;&amp;#114;&amp;#103;&lt;/a&gt; 問也沒有回應 ...&lt;/p&gt;
&lt;p&gt;所以 Firefox ESR 應該已經不支援 Jessie 了...&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>JBake v2.5.1 安裝</title>
      <link>http://shunyi.github.com/blog/2017/jbake-2.5.1.html</link>
      <pubDate>星期六, 14 十月 2017 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2017/jbake-2.5.1.html</guid>
      	<description>
	&lt;ol&gt;
  &lt;li&gt;
  &lt;p&gt;下載 JBake, 並解壓縮&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;unzip jbake-2.5.1-bin.zip 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;建立 project 目錄，並初始化&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;mkdir project
cd project/
../bin/jbake -i
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;產生 output 目錄&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;../bin/jbake -b 
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;執行預覽 (若 &lt;strong&gt;content 目錄&lt;/strong&gt; 的資料有改動會自動 update)&lt;/p&gt;
  &lt;pre&gt;&lt;code&gt;../bin/jbake -s
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
  &lt;li&gt;若 blog 已從 &lt;strong&gt;content 目錄&lt;/strong&gt; 刪除，已存在於 &lt;strong&gt;output 目錄&lt;/strong&gt; 的資料還是會被保留&lt;/li&gt;
&lt;/ol&gt;
	</description>
    </item>
    <item>
      <title>Web Service</title>
      <link>http://shunyi.github.com/blog/2014/web-service-post.html</link>
      <pubDate>星期日, 23 二月 2014 00:00:00 +0800</pubDate>
      <guid isPermaLink="false">blog/2014/web-service-post.html</guid>
      	<description>
	&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;先建立要透過 Web Service 呼叫的 method&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;package tw.shunyi.ws.server;

import javax.jws.WebService;

@WebService
public class CircleFunctions {

    public double getArea(double r) {
        return java.lang.Math.PI * (r * r);
    }

    public double getCircumference(double r) {
        return 2 * java.lang.Math.PI * r;
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;建立 server 端程式&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;package tw.shunyi.ws.server;

import javax.xml.ws.Endpoint;

public class Server {

    public static void main(String[] args) {

        Endpoint.publish(
                &amp;quot;http://localhost:8080/SimpleWebService/circlefunctions&amp;quot;,
                new CircleFunctions());

    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;啟動 web server&lt;/p&gt;
    &lt;p&gt;3.1. 程式會動態產生 wrapper class&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;2014/2/23 上午 09:11:19 com.sun.xml.internal.ws.model.RuntimeModeler getRequestWrapperClass
資訊: Dynamically creating request wrapper Class tw.shunyi.ws.server.jaxws.GetArea
2014/2/23 上午 09:11:19 com.sun.xml.internal.ws.model.RuntimeModeler getResponseWrapperClass
資訊: Dynamically creating response wrapper bean Class tw.shunyi.ws.server.jaxws.GetAreaResponse
2014/2/23 上午 09:11:19 com.sun.xml.internal.ws.model.RuntimeModeler getRequestWrapperClass
資訊: Dynamically creating request wrapper Class tw.shunyi.ws.server.jaxws.GetCircumference
2014/2/23 上午 09:11:19 com.sun.xml.internal.ws.model.RuntimeModeler getResponseWrapperClass
資訊: Dynamically creating response wrapper bean Class tw.shunyi.ws.server.jaxws.GetCircumferenceResponse
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;3.2. 可以執行以下指令來產生 wrapper class, 避免每次重啟 server 都要動態產生&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;wsgen -verbose -cp . tw.shunyi.ws.server.CircleFunctions
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;執行以下指令產生給 client site 用的檔案&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;wsimport -p tw.shunyi.ws.client -s src -d bin -verbose http://localhost:8080/SimpleWebService/circlefunctions?WSDL
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;建立 client 端程式&lt;/p&gt;
    &lt;!--prettify--&gt;
    &lt;pre&gt;&lt;code&gt;package tw.shunyi.ws.client;

public class Client {
    private static CircleFunctionsService service;

    public static void main(String[] args) {
        service = new CircleFunctionsService();
        CircleFunctions port = service.getCircleFunctionsPort();
        System.out.println(port.getArea(1.0));
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;執行結果&lt;/p&gt;
    &lt;pre&gt;&lt;code&gt;3.141592653589793
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;
	</description>
    </item>

  </channel> 
</rss>
